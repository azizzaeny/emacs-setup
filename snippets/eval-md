var fs = require('fs');

function extractParams(paramsString){
  if(paramsString){
    return paramsString.split(/\s+/).reduce((acc, params)=>{
      let [key, value] = params.split('=');
      if(key && value){
        acc[key] = isNaN(value) ? value : parseInt(value);
      }     
      return acc;
    }, {});
  }
  return {};
}

function extractCode(markdown){
  let regex = /```(\w+)((?:\s+\w+=[\w./]+)*)\s*([\s\S]*?)```/g;
  return [...markdown.matchAll(regex)].reduce((acc, match) => {
    let lang         = match[1];
    let paramsString = match[2];
    let code         = match[3].trim();
    let params       = extractParams(paramsString);
    return acc.concat({
      ...params,
      lang,
      code
    });
  }, []);
}

function isRunnable(block){
  return ((block.lang === "javascript" || block.lang === "js") && block.evaluate && block.evaluate === 1);
}

function compileRunnableCode(blocks){
  return blocks.reduce((acc, block) =>{
    if(isRunnable(block)){
      return acc.concat(`${block.code}\n`);
    }
    return acc;
  }, '');
}

function compileDistCode(blocks){
  return blocks.reduce((acc, block)=>{
    let file = block.file;
    if(block.file){
      if(!acc[file]){ // TODO: remove stirng of file
        acc[file] = block.code
      }else{
        acc[file] = acc[file].concat(`\n${block.code}`);
      }
    }
    return acc;
  }, {});
}

function read(file){   // TODO: add caching system
  return fs.readFileSync(file, 'utf8');
}

function write(file, data){
  return fs.writeFileSync(file, data);
}

function tangle(contents, atFile, toDir="." ){
  let blocks   = extractCode(contents);
  let codes    = compileDistCode(blocks);
  if(Object.keys(codes).length == 0) return 'no codes to compile found';
  if(atFile && codes[atFile]){
    let output = `${toDir}/${atFile}`;
    return (write(output, codes[atFile]), output);
  }
   return Object.entries(codes).map(([atFile, txt])=>{
     let output = `${toDir}/${atFile}`;
     return (write(output, txt), output);
  });
}

function evaluate(contents, atFile){
  let blocks   = extractCode(contents);  
  if(!atFile){
    let codes = compileRunnableCode(blocks);
    if(!codes) return 'no codes found';
    (1,eval)(codes);  //its magic
    return;
  }
  let extracted = compileDistCode(blocks);
  let codes = extracted[atFile];
  if(!codes) return 'no codes found';
  (1,eval)(codes);  //its magic
}

function tangleFile(file, atFile, rootDir="."){
  return tangle(read(file), atFile, rootDir);
}

function loadFile(file, atFile){
  return evaluate(read(file), atFile);
}
